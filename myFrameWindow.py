# -*- coding: utf-8 -*- 
  
# ==============================
# @author: Joycat
# @time: 2024/04/28
# ==============================

###########################################################################
##
## PLEASE DO *NOT* EDIT THIS FILE!
##
###########################################################################
## CLASS Ui_MainWindow 
## CLASS ButtonEvents_MainWindow
###########################################################################

# Form implementation generated from reading ui file 'test.ui'
#
# Created by: PyQt6 UI code generator 6.4.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt6.QtCore import QSize, QMetaObject, QCoreApplication
from PyQt6.QtGui import QFont, QIcon, QPixmap
from PyQt6 import QtWidgets
from analysisMain import AnalysisResult

class Ui_MainWindow(object):
    """  
    主窗口界面的UI类,用于设置和初始化主窗口的各种属性和布局    
    """ 
    def setupUi(self, MainWindow):
        """  
        设置主窗口的UI界面  
  
        Args:  
            MainWindow (QMainWindow): 主窗口对象,用于设置其UI属性  
        Returns:  
            None: 此方法不返回任何值,但会修改MainWindow对象的UI设置  
        """ 
        # 设置主窗口的对象名称   
        MainWindow.setObjectName("MainWindow")
        # 设置主窗口的初始大小
        MainWindow.resize(882, 674)
        # 设置主窗口的基础大小
        MainWindow.setBaseSize(QSize(387, 87))
        # 创建并设置主窗口的字体
        font = QFont()
        font.setFamily("华文楷体")
        font.setPointSize(12)
        MainWindow.setFont(font)
        # 创建图标并设置为主窗口的窗口图标
        icon = QIcon()
        icon.addPixmap(QPixmap("./favicon.ico"), QIcon.Mode.Normal, QIcon.State.Off)
        MainWindow.setWindowIcon(icon)
        # 创建中心部件并设置其属性
        self.centralwidget = QtWidgets.QWidget(parent=MainWindow)
        self.centralwidget.setMaximumSize(QSize(16777215, 16777215))
        self.centralwidget.setAutoFillBackground(True)
        self.centralwidget.setObjectName("centralwidget")
        # 创建并设置网格布局
        self.gridLayout_2 = QtWidgets.QGridLayout(self.centralwidget)
        self.gridLayout_2.setObjectName("gridLayout_2")
        # 创建水平布局
        self.horizontalLayout = QtWidgets.QHBoxLayout()
        self.horizontalLayout.setObjectName("horizontalLayout")
        # 创建并设置显示按钮 
        self.showPushButton = QtWidgets.QPushButton(parent=self.centralwidget)
        self.showPushButton.setObjectName("showPushButton")
        self.horizontalLayout.addWidget(self.showPushButton)
        # 创建并设置分析按钮
        self.analysisPushButton = QtWidgets.QPushButton(parent=self.centralwidget)
        self.analysisPushButton.setObjectName("analysisPushButton")
        self.horizontalLayout.addWidget(self.analysisPushButton)
        # 创建并设置保存按钮
        self.savePushButton = QtWidgets.QPushButton(parent=self.centralwidget)
        self.savePushButton.setObjectName("savePushButton")
        self.horizontalLayout.addWidget(self.savePushButton)
        # 将水平布局添加到网格布局中
        self.gridLayout_2.addLayout(self.horizontalLayout, 2, 0, 1, 1)
        # 创建另一个网格布局
        self.gridLayout = QtWidgets.QGridLayout()
        self.gridLayout.setObjectName("gridLayout")
        # 创建并设置文件路径输入框
        self.filePathLineEdit = QtWidgets.QLineEdit(parent=self.centralwidget)
        self.filePathLineEdit.setObjectName("filePathLineEdit")
        # 将文件路径输入框添加到网格布局中
        self.gridLayout.addWidget(self.filePathLineEdit, 0, 1, 1, 1)
        # 创建并选择文件按钮
        self.selectFilePushButton = QtWidgets.QPushButton(parent=self.centralwidget)
        self.selectFilePushButton.setObjectName("selectFilePushButton")
        # 将选择文件按钮添加到网格布局中
        self.gridLayout.addWidget(self.selectFilePushButton, 0, 0, 1, 1)
        # 将包含文件路径输入框和选择按钮的网格布局添加到另一个网格布局中
        self.gridLayout_2.addLayout(self.gridLayout, 1, 0, 1, 1)
        # 创建最终结果文本框
        self.finalResult = QtWidgets.QTextEdit(parent=self.centralwidget)
        self.finalResult.setObjectName("finalResult")
        # 设置最终结果文本框为只读
        self.finalResult.setReadOnly(True)
        # 将最终结果文本框添加到网格布局中
        self.gridLayout_2.addWidget(self.finalResult, 3, 0, 1, 1)
        # 创建水平布局,用于放置图片标签
        self.imagesHorizontalLayout = QtWidgets.QHBoxLayout()
        self.imagesHorizontalLayout.setObjectName("imagesHorizontalLayout")
        self.labelUniversityLogo = QtWidgets.QLabel(parent=self.centralwidget)
        self.labelUniversityLogo.setMaximumSize(QSize(300, 75))
        self.labelUniversityLogo.setBaseSize(QSize(300, 75))
        self.labelUniversityLogo.setText("")
        self.labelUniversityLogo.setPixmap(QPixmap("logo/university.png"))
        self.labelUniversityLogo.setScaledContents(True)
        self.labelUniversityLogo.setObjectName("labelUniversityLogo")
        self.imagesHorizontalLayout.addWidget(self.labelUniversityLogo)
        self.labelTeamLogo = QtWidgets.QLabel(parent=self.centralwidget)
        self.labelTeamLogo.setMaximumSize(QSize(250, 125))
        self.labelTeamLogo.setText("")
        self.labelTeamLogo.setPixmap(QPixmap("logo/team.jpg"))
        self.labelTeamLogo.setScaledContents(True)
        self.labelTeamLogo.setObjectName("labelTeamLogo")
        self.imagesHorizontalLayout.addWidget(self.labelTeamLogo)
        self.labelCollegeLogo = QtWidgets.QLabel(parent=self.centralwidget)
        self.labelCollegeLogo.setMaximumSize(QSize(300, 75))
        self.labelCollegeLogo.setText("")
        self.labelCollegeLogo.setPixmap(QPixmap("logo/college.png"))
        self.labelCollegeLogo.setScaledContents(True)
        self.labelCollegeLogo.setObjectName("labelCollegeLogo")
        self.imagesHorizontalLayout.addWidget(self.labelCollegeLogo)
        self.gridLayout_2.addLayout(self.imagesHorizontalLayout, 0, 0, 1, 1)
        MainWindow.setCentralWidget(self.centralwidget)
        self.statusbar = QtWidgets.QStatusBar(parent=MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        # 调用函数对界面上的文本进行翻译
        self.retranslateUi(MainWindow)
        # 根据对象名称连接信号和槽（自动连接MainWindow中定义的信号和槽函数）
        QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        """  
        翻译UI界面上的文本内容  
  
        Args:  
            self: 当前类的实例对象  
            MainWindow: 主窗口对象 
        Returns:  
            None  
        """  
        _translate = QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "仿真2D 胜率分析软件"))
        self.showPushButton.setText(_translate("MainWindow", "展示原始对局信息"))
        self.analysisPushButton.setText(_translate("MainWindow", "进行胜率分析"))
        self.savePushButton.setText(_translate("MainWindow", "保存分析结果"))
        self.selectFilePushButton.setText(_translate("MainWindow", "选择对局记录文件"))


class ButtonEvents_MainWindow(QtWidgets.QMainWindow):  
    """  
    实现主窗口按钮功能的类  
  
    Args:  
        无 
    Returns:  
        无返回值,但初始化了一个具有UI界面的主窗口,并绑定了按钮事件处理函数  
    """ 
    def __init__(self):  
        """  
        初始化主窗口界面,并绑定按钮事件  
  
        Args:  
            无 
        Returns:  
            无返回值,但在初始化过程中,创建了UI界面并设置了按钮点击事件的处理函数  
        """  
        super().__init__()
        # 初始化一个 AnalysisResult 对象,用于在后续成员函数中保存调用同一对象的内容数据
        self.analysisResultObject = AnalysisResult('./', 'None')
        self.ui = Ui_MainWindow()
        self.ui.setupUi(self)
        self.ui.selectFilePushButton.clicked.connect(self.select_file) 
        self.ui.showPushButton.clicked.connect(self.showOriginalData)
        self.ui.analysisPushButton.clicked.connect(self.analysisData)
        self.ui.savePushButton.clicked.connect(self.saveData)

    def select_file(self):  
        """  
        实现文件选择对话框,并将选择的文件路径显示在文本框中  
  
        Args:  
            无  
        Returns:  
            无返回值,但会将用户选择的文件路径显示在指定的文本框中  
        """  
        file_dialog = QtWidgets.QFileDialog(self, "选择文件", "", "Text Files (*.txt)") 
        if file_dialog.exec():  
            file_path = file_dialog.selectedFiles()[0]  
            self.ui.filePathLineEdit.setText(file_path)
    
    def showOriginalData(self):
        """  
        展示原始对局数据  
  
        Args:  
            无  
        Returns:  
            无返回值,但会在文本框中展示原始对局数据,如果文件为空或路径错误则显示错误信息  
        """  
        ana = AnalysisResult(self.ui.filePathLineEdit.text(), 'None')
        # 下面这句代码会在用户完成分析后再次点击展示原始数据后导致全局对象被更新,导致之前的对象分析数据丢失
        # self.analysisResultObject = ana
        originalData = ana.getOriginalResult()
        if originalData:
            self.ui.finalResult.setText(''.join(originalData))
        else:
            self.ui.finalResult.setText("This .txt file is empty or file path is wrong.")
    
    def getTeamnName(self):   
        """  
        获取用户输入的队伍名称  
  
        Args:  
            无  
        Returns:  
            返回一个元组,包含用户输入的队伍名称和一个布尔值,表示用户是否点击了"OK"按钮  
        """  
        teamName, ok = QtWidgets.QInputDialog.getText(self, '请输入队伍名称', '默认为"YuShan", 点击ok即可', text='YuShan')   
        return teamName, ok

    def analysisData(self):
        """  
        进行胜率分析,并将结果或错误信息显示在文本框中  
  
        Args:  
            无  
        Returns:  
            无返回值,但会根据用户输入的队伍名称和文件路径,进行胜率分析,并将结果或错误信息显示在文本框中  
        """  
        teamName, ok = self.getTeamnName()
        if not ok:
            return False
        ana = AnalysisResult(self.ui.filePathLineEdit.text(), teamName)
        self.analysisResultObject = ana
        ana.runMain()
        finalData = ana.getFinalData()
        errors = ana.getErrorsMessages()
        if finalData:
            self.ui.finalResult.setText(''.join(finalData))
        else:
            self.ui.finalResult.setText(''.join(errors))
        
    def saveData(self):
        """  
        保存分析数据到指定位置  
  
        Args:  
            无
        Returns:  
            bool: 如果保存成功返回True,否则返回False  
        """ 
        if len(self.analysisResultObject.finalData) == 0:
            QtWidgets.QMessageBox.warning(self, '保存失败', "不存在分析数据, 保存失败") 
            return False
        
        if self.analysisResultObject.saved:
            QtWidgets.QMessageBox.warning(self, '保存失败', "当前数据已被保存, 不允许重复保存") 
            return False
        success = self.analysisResultObject.saveFinalData()
        if success[0]:
            # QtWidgets.QMessageBox.information(self, '保存成功', '数据已成功保存!')
            msg_box = QtWidgets.QMessageBox(self)
            msg_box.setWindowTitle('保存成功')  
            msg_box.setText('数据已成功保存,是否在浏览器中打开分析图?')
            msg_box.setStandardButtons(QtWidgets.QMessageBox.StandardButton.Ok | QtWidgets.QMessageBox.StandardButton.Cancel)
            response = msg_box.exec()  

            if response == QtWidgets.QMessageBox.StandardButton.Ok:  
                self.analysisResultObject.showHTMLCharts()
            # 判断当前进行分析的对象结果是否保存过
            self.analysisResultObject.saved = True
            return True  
        else:
            QtWidgets.QMessageBox.warning(self, '保存失败', str(success[1])) 
            return False
        

